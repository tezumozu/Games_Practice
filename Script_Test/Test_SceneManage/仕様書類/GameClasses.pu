@startuml GameSceneクラス図

namespace Managers{
    enum Phase{
        REDY,
        GAME,
        RESULT,
        END
    }

    class PhaseManager{
        +getPhase()
    }

    class Initarizer{
        +init()
    }

    Phase --o PhaseManager
    Initarizer --> PhaseManager
}


namespace Scores{

    class ScoreManager<<singleton>>{
        +setInput(IInputEventProvider)
    }

    ScoreManager --> Inputs.IInputEventProvider:obsever

    ScoreManager --> Rankings.RankingManager
    ScoreManager -up-> Managers.PhaseManager
}


namespace Timers{
    class TimerPresenter{

    }

    class TimerView<<singleton>>{

    }
    class CountDownView<<singleton>>{

    }

    class Timer<<abstract>>{
        +stertTimer
        +endTimer
    }

    TimerView --|> Timer
    CountDownView --|> Timer

    TimerPresenter <-right-> Managers.PhaseManager:Obsever
    TimerPresenter o-left-> Timer:Obsever

}


namespace Inputs{
    class GameInputsEventProvider<<SingletonMono>>{

    }

    interface IInputEventProvider{
    }

    GameInputsEventProvider .right.|> IInputEventProvider
}


namespace Rankings{
    class RankingManager <<singleton>>{
        -RankingData data
        +getRanking()
        -wrightRanking()
        +updateRanking(int)
    }

    class RankingData<<stract>>{
        +int rank1
        +int rank2
        +int rank3
    }

    RankingManager o-- RankingData 
}

namespace ResultViews{
    Class ResultPresenter{

    }    

    ResultPresenter -up-> Timers.TimerPresenter:Obsever
}

@enduml